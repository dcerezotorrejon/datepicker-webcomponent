/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface DatePicker {
        "dateFormat": string;
        "expanded": string;
        "inputEndSelector"?: string;
        "inputStartSelector"?: string;
        "locale": string;
        "maxDate": Date;
        "minDate": Date;
        /**
          * The first name
         */
        "mode": string;
        "onDayRender"?: (configObj: CalendarTypes.externalDaySettings, day: Date | null) => CalendarTypes.externalDaySettings;
        "open": boolean;
        "openOnFocus"?: boolean;
        "role": string;
        "selectedDates": Array<Date | null>;
        "showMonths": number;
        "startWeekDay": number;
        "updateSelectedDates": (dates: Date[]) => Promise<void>;
    }
}
export interface DatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDatePickerElement;
}
declare global {
    interface HTMLDatePickerElementEventMap {
        "selectedDate": CalendarTypes.selectedDateContext;
        "rendered": void;
    }
    interface HTMLDatePickerElement extends Components.DatePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDatePickerElementEventMap>(type: K, listener: (this: HTMLDatePickerElement, ev: DatePickerCustomEvent<HTMLDatePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDatePickerElementEventMap>(type: K, listener: (this: HTMLDatePickerElement, ev: DatePickerCustomEvent<HTMLDatePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDatePickerElement: {
        prototype: HTMLDatePickerElement;
        new (): HTMLDatePickerElement;
    };
    interface HTMLElementTagNameMap {
        "date-picker": HTMLDatePickerElement;
    }
}
declare namespace LocalJSX {
    interface DatePicker {
        "dateFormat"?: string;
        "expanded"?: string;
        "inputEndSelector"?: string;
        "inputStartSelector"?: string;
        "locale"?: string;
        "maxDate"?: Date;
        "minDate"?: Date;
        /**
          * The first name
         */
        "mode"?: string;
        "onDayRender"?: (configObj: CalendarTypes.externalDaySettings, day: Date | null) => CalendarTypes.externalDaySettings;
        "onRendered"?: (event: DatePickerCustomEvent<void>) => void;
        "onSelectedDate"?: (event: DatePickerCustomEvent<CalendarTypes.selectedDateContext>) => void;
        "open"?: boolean;
        "openOnFocus"?: boolean;
        "role"?: string;
        "selectedDates"?: Array<Date | null>;
        "showMonths"?: number;
        "startWeekDay"?: number;
    }
    interface IntrinsicElements {
        "date-picker": DatePicker;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "date-picker": LocalJSX.DatePicker & JSXBase.HTMLAttributes<HTMLDatePickerElement>;
        }
    }
}
